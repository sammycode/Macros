<?xml version="1.0" encoding="utf-8"?>
<configuration>
  
  <!--
    Don't remove the log4net, unless you also remove the log4net configuration section of this.
    This section allows the framework to support third party configuration formats.
    It's possible if you decide to add your own features, you'll end up with more configuration sections,
    but for regular users, just leave this section alone.
  -->
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  
  <!--
    Don't change this setting.  This might be changed if your OS doesn't support the specific framework that this 
    was built with, but even then milage may vary.  I'll update this as it becomes (if it becomes) needed.
  -->
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.1" />
  </startup>
  
    <!--
        The Connection string is pretty important, but that doesn't mean it can't or shouldn't be modified.
        Currently both supported Database Providers use the same connection string name, DefaultConnection.
        
        In pretty short order this will become more configurable, where the desired connection will be configured as an app setting,
        which would then allow you to have different data sources set up.
        
        Aside from that, it's really important to know that the connection string syntax, is directly related to providerName.  If you hapen to be using 
        SQL Server, the provider name should be System.Data.SqlClient, and if you happen to be using SQLite, the provider name will be System.Data.SQLite
        
        At some point I'll add in the formatting of the connection string.  Though I expect most users will want to keep the default SQLite support,
        and probably developers or hobbiests might want to check out SQL Server, as it makes usage of, or extension of any data managed by this application
        really trivial.  (it also requires some manual management and more overhead)    
      -->
  <connectionStrings>
    <!--<add name="DefaultConnection" 
         connectionString="data source=localhost; initial catalog=MACROS_1; integrated security=True; MultipleActiveResultSets=True; App=EntityFramework" 
         providerName="System.Data.SqlClient" />-->
    <add name="DefaultConnection"
         connectionString ="URI=file:MACROS_1.db" 
         providerName="System.Data.SQLite" />
  </connectionStrings>
  
  <!--
    The Application Settings
    
    This is the area for anything that is intended to be configurable.  Each setting will have a description, what values might be enterd,
    and some perhaps you probably don't want to change.
    
  -->
  <appSettings>
    <!--
      I would leave this setting as is.  This allows the UI to take advantage of advanced font scaling provided
      in windows 10.  If you remove this or set it to false, and run on windows 10, the UI likely won't look quite right, though
      it won't functionally break anything.
    -->
    <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />

    <!--
        The Data Provider to Use
        Valid values are, SQLServer and SQLite (Case Sensitive)
        If this setting is either not configured, or not present, the system will default to using SQLite.
        Note that this setting has an impact on how the connection string is used.
      -->
    <add key="DATA.PROVIDER" value="SQLite" />
    
    <!--
      The Connection String *NAME*
      This is not the connection string, this is the connection string name.  This applies to the connectionStrings section
      of this configuration file.  This value should match the connection string with the name attribute you wish to use.
      
      If this setting is not present, 'DefaultConnection' will be used.  If it is present, but a matching connection string
      is not, you'll get to enjoy probably a nasty error when you attempt to start the system.
      
      However, helpful logs should be present if you haven't mangled up the log4net section of this configuraiton file too badly.
      -->
    <add key="DATA.CONNECTIONSTRING" value="DefaultConnection" />
  
  </appSettings>
  
  <!-- Don't touch this section, Ninject is required to build up the application composition -->
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Ninject" publicKeyToken="c7192dc5380945e7" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.3.4.0" newVersion="3.3.4.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>

  <!-- 
    If you care about logging, feel free to modify this section.
    Honestly even if you remove this section entirely, the application will function normally.
    If you're running into weird things, or application crashes, be sure to set the logging
    level to ALL, and then grab the log file and we can have a look.
    If everything is running fine, you can turn this off, or drop the log level to something like WARN
  -->
  <log4net>
    <root>
      <level value="ALL" />
      <appender-ref ref="RollingFileAppender" />
    </root>
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <File type="log4net.Util.PatternString" value="logs\Macros.log" />
      <appendToFile value="true" />
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <rollingStyle value="Composite" />
      <datePattern value="'.'yyyy_MM_dd" />
      <maxSizeRollBackups value="30" />
      <maximumFileSize value="10MB" />
      <staticLogFileName value="true" />
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="ConversionPattern" value="%date{yyyy/MM/dd HH:mm:ss,fff} %-5level %logger [%thread] %message %exception%newline" />
      </layout>
    </appender>
  </log4net>

  <!-- Probably Shouldn't touch this section, this is to allow ADO.NET support for SQLite Engine. -->
  <system.data>
    <DbProviderFactories>
      <remove invariant="System.Data.SQLite.EF6" />
      <add name="SQLite Data Provider (Entity Framework 6)" invariant="System.Data.SQLite.EF6" description=".NET Framework Data Provider for SQLite (Entity Framework 6)" type="System.Data.SQLite.EF6.SQLiteProviderFactory, System.Data.SQLite.EF6" />
      <remove invariant="System.Data.SQLite" />
      <add name="SQLite Data Provider" invariant="System.Data.SQLite" description=".NET Framework Data Provider for SQLite" type="System.Data.SQLite.SQLiteFactory, System.Data.SQLite" />
    </DbProviderFactories>
  </system.data>

</configuration>